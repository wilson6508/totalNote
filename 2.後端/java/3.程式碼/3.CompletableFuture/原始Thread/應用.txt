@Scheduled(cron = "0 13 13 * * *")
public void demo() {
	int threads = 2; // 一次做2份報告
	SearchApiResponseBean statusWait = autoReportTaskService.getTask(0, "xxx");
	List<MultiReport> reports = autoReportTaskService.getMultiReports(threads, statusWait);
	for (MultiReport report : reports) {
		report.start();
	}
}
------------------------------------------------------------------------------------------------
package com.eland.service.autoreport;
import com.eland.pojo.info.membership.AutoReportTaskBean;
public class MultiReport extends Thread {
    private AutoReportTaskBean autoReportTaskBean;
    public MultiReport(AutoReportTaskBean autoReportTaskBean) {
        this.autoReportTaskBean = autoReportTaskBean;
    }
    public AutoReportTaskBean getAutoReportTaskBean() {
        return autoReportTaskBean;
    }
    public void setAutoReportTaskBean(AutoReportTaskBean autoReportTaskBean) {
        this.autoReportTaskBean = autoReportTaskBean;
    }
    private AutoReportTaskService autoReportTaskService;
    public void run() {
        autoReportTaskService = BeanContext.getApplicationContext().getBean(AutoReportTaskService.class);
        autoReportTaskService.generateAutoReport(autoReportTaskBean);
    }
}
------------------------------------------------------------------------------------------------
package com.eland.service.autoreport;
import org.springframework.beans.BeansException;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.stereotype.Component;
@Component
public class BeanContext implements ApplicationContextAware {
    private static ApplicationContext applicationContext;
    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
        BeanContext.applicationContext = applicationContext;
    }
    public static ApplicationContext getApplicationContext(){
        return applicationContext;
    }
    @SuppressWarnings("unchecked")
    public static <T> T getBean(String name) throws BeansException {
        return (T)applicationContext.getBean(name);
    }
    public static <T> T getBean(Class<T> clz) throws BeansException {
        return (T)applicationContext.getBean(clz);
    }
}
--------------------------------------------------------------------------------------------------
    public List<AutoReportTaskBean> getMultiBeans(int threads, SearchApiResponseBean statusWait) {
        TypeToken typeToken = new TypeToken<List<AutoReportTaskBean>>() {};
        String statusWaitResult = gson.toJson(statusWait.getResult());
        List<AutoReportTaskBean> statusWaitBeans = gson.fromJson(statusWaitResult, typeToken.getType());
        int notToDoId = Collections.min(statusWaitBeans.stream().map(AutoReportTaskBean::getId).collect(Collectors.toList())) + threads;
        return statusWaitBeans.stream().filter(e -> e.getId() < notToDoId).collect(Collectors.toList());
    }

    public List<MultiReport> getMultiReports(int threads, SearchApiResponseBean statusWait) {
        TypeToken typeToken = new TypeToken<List<AutoReportTaskBean>>() {};
        String statusWaitResult = gson.toJson(statusWait.getResult());
        List<AutoReportTaskBean> statusWaitBeans = gson.fromJson(statusWaitResult, typeToken.getType());
        int notToDoId = Collections.min(statusWaitBeans.stream().map(AutoReportTaskBean::getId).collect(Collectors.toList())) + threads;
        return statusWaitBeans.stream().filter(e -> e.getId() < notToDoId).map(MultiReport::new).collect(Collectors.toList());
    }