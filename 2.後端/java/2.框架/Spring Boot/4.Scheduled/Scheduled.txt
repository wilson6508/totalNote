https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/312672/

@EnableScheduling
@SpringBootApplication
@ComponentScan(basePackages = "com")
public class DemoApplication {

@Component
public class Task {

---------------------------------------------------------------------------------------------------------------------------
package com.eland.scheduler;

import com.eland.service.trend.SaveShareResultService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

/**
 * Created by wilsonhuang on 2021/2/23.
 */
@Component
public class DeletePromotionInfoTask {

    @Autowired
    SaveShareResultService saveShareResultService;

    //每天 0點0分0秒執行
    //@Scheduled(cron = "幾秒 幾分 幾時 幾號 幾月 星期幾 年分")
    @Scheduled(cron = "0 0 0 * * ?")
    public void dayTimerCron() {
        saveShareResultService.deleteExpiredTimeData();
        System.out.println("success delete expired time data of dbo.promotion_info.");
    }
	

	@Scheduled(cron = "0/10 * * * * *")			  // 從0秒開始，每10秒執行一次
	@Scheduled(cron = "0 * * * * ?")              // 每分鐘0秒執行
	@Scheduled(cron = "0 28 11 ? * *")    		  // 指定每天11:28執行
	@Scheduled(cron = "0 28 11 * * *")    		  // 指定每天11:28執行
	@Scheduled(cron = "0 0/10 * * * *")			  // 每10分鐘執行1次
	@Scheduled(cron = "0 0 0/1 * * *")    		  // 每小時執行1次
    @Scheduled(cron = "0 45 2 5 * *")   		  // 每年每月5號02:45 執行
    @Scheduled(cron = "0 45 4 5 1,4,7,10 *")      // 每年 1, 4, 7, 10 月 5 號 04:45 執行

    @Scheduled(fixedRate = 1000)                  // 不管前次執行是否結束，過1秒後，再次執行。
	@Scheduled(fixedRate = 2000, initialDelay = 5000) // 專案執行後等5秒，每2秒執行
    @Scheduled(fixedDelay = 5 * 60 * 1000)		  // 此方法完成以後，過5分鐘，再次執行。
	
}
---------------------------------------------------------------------------------------------------------------------------
package com.eland.scheduler;

import com.eland.service.trend.UsageAmountService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.util.Calendar;

/**
 * Created by yshong on 2021/1/6.
 */
@Component
public class ResetUsageAmountTask {

    @Autowired
    UsageAmountService usageAmountService;

    //每週日 00點00分00秒執行
    @Scheduled(cron = "59 59 23 ? * 1")
    public void weekTimerCron() {
        usageAmountService.resetUsageAmount(1);
        System.out.println("success reset usage amount from week.");
    }

    //每月最後一天 00點00分00秒執行
    @Scheduled(cron = "59 59 23 28-31 * ?")
    public void monthTimerCron() {
        final Calendar calendar = Calendar.getInstance();
        if (calendar.get(Calendar.DATE) == calendar.getActualMaximum(Calendar.DATE)) {
            usageAmountService.resetUsageAmount(2);
            System.out.println("success reset usage amount from month.");
        }
    }

    //每年最後一天 00點00分00秒執行
    @Scheduled(cron = "59 59 23 31 12 ?")
    public void yearTimerCron() {
        usageAmountService.resetUsageAmount(3);
        System.out.println("success reset usage amount from year.");
    }
	
	// 一個方法可以配置兩個執行時間
	@Scheduled(cron = "20 57 14 ? * *")
    @Scheduled(cron = "30 57 14 ? * *")
    public void monthlyTask() {
        System.out.println("QQQ");
    }
}
