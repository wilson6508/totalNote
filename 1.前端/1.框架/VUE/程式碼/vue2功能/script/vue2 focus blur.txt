<template>
  <div>
    <h3>Example</h3>
    <div class="bgImg">
    <form class="form-inline ml-0 form-explore-input" @submit.prevent="testSearch()">
      <div class="input-group input-group-lg" style="margin: 2% 22%;">
        <input
          list="inputList"
          type="text"
          class="form-control form-control-explore"
          :placeholder="placeholder"
          v-model="value"
          autocomplete="off"
          @keyup.enter="testSearch()"
          ref="textInput"
        />
        <datalist id="inputList" v-html="rememberKeyword"></datalist>
        <div class="input-group-append">
          <button class="btn btn-explore">
            <i class="material-icons-outlined md-24" v-text="iconName"></i>
          </button>
        </div>
      </div>
    </form>
    </div>
    <button @click="test01()">OK</button>
    <ShowCode :code="code"></ShowCode>
  </div>
</template>

<style scoped>
.form-control {
  display: block;
  width: 100%;
  height: calc(2.25rem + 2px);
  padding: 0.375rem 0.75rem;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #495057;
  background-color: #ffffff;
  background-clip: padding-box;
  border-radius: 0.25rem;
  box-shadow: inset 0 0 0 rgba(0, 0, 0, 0);
  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}
.bgImg {
  width: 100%;
  height: 100%;
  background: url("../../../assets/images/optrend-login-bg.jpg");
}
</style>

<script>
import ShowCode from "./ShowCode";
export default {
  components: {
    ShowCode,
  },
  mounted() {
    this.$refs.textInput.focus();
  },
  data() {
    return {
      value: "",
      testA: true,
    };
  },
  props: {
    dataList: {
      type: Array,
    },
    placeholder: {
      type: String,
    },
    iconName: {
      type: String,
    },    
  }, 
  computed: {
    rememberKeyword() {
      let str = "";
      if (this.dataList === null) {
        return str;
      }
      for (const element of this.dataList) {
        str += `<option value=${element}></option>`;
      }
      return str;
    },
    code() {
      return `<input list="inputList" type="text" class="form-control form-control-explore"
              :placeholder="placeholder" autocomplete="off" v-model="value" @keyup.enter="testSearch()"/>`;
    },
  },
  methods: {
    testSearch() {
      if (this.enterNothing(this.value)) {
        this.$swal.fire("錯誤", "請輸入關鍵字", "error");
        return;
      } else {
        this.$swal.fire({
          icon: "success",
          title: "送出查詢",
          showConfirmButton: false,
          timer: 1500,
        });
      }
      this.$emit('updateDataList', this.value);
    },
    enterNothing(str) {
      if (str.length === 0) {
        return true;
      }
      var regu = "^[ ]+$";
      var re = new RegExp(regu);
      return re.test(str);
    },
    test01() {
      if (this.testA) {
        this.testA = !this.testA;
        this.$refs.textInput.focus();
      } else {
        this.testA = !this.testA;
        this.$refs.textInput.blur();
      }
    },
  },
};
</script>